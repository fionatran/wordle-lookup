{"version":3,"sources":["logo.png","wordle_solutions.txt","index.js"],"names":["module","exports","__webpack_require__","p","wordLen","ModalContent","props","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","href","Guess","_this","Object","_Users_fionatran_Documents_Personal_WordleSolver_wordle_lookup_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_fionatran_Documents_Personal_WordleSolver_wordle_lookup_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_fionatran_Documents_Personal_WordleSolver_wordle_lookup_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleChange","bind","_Users_fionatran_Documents_Personal_WordleSolver_wordle_lookup_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","handleKey","event","i","guessNumber","onChange","target","placeholder","value","toLowerCase","key","onSubmit","guessCount","shiftKey","onAddGuess","focus","hasValError","wordInputClassName","statusInputClassName","type","autoFocus","onKeyDown","React","Component","WordleLookup","_this2","state","words","statuses","result","searchEnabled","isModal","checkValError","handleSubmit","handleAddGuess","handleDeleteGuess","search","toggleModal","j","length","field","wordRe","RegExp","statusRe","setState","match","maxGuessCount","slice","searchDictionary","prev","modalClass","valErrorMessage","guessArray","push","addButton","onClick","deleteButton","map","w","Fragment","aria-label","src","logo","alt","role","id","_callee5","expArray","hits","misses","onLetters","offs","offUniversal","offLetters","letterIndex","letter","searchRe","onLettersCount","offLettersCount","_i","_j","_i2","_j2","_i3","_i4","re","_regeneratorRuntime","wrap","_context5","next","Array","fill","abrupt","charCodeAt","t0","charAt","String","fromCharCode","fetch","dictionary","then","r","text","_step","_iterator","_createForOfIteratorHelper","split","s","n","done","entry","err","e","f","stop","document","body","classList","add","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.927698cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5db4e24a.png\";","module.exports = __webpack_public_path__ + \"static/media/wordle_solutions.4551632a.txt\";","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport logo from './logo.png';\nimport dictionary from './wordle_solutions.txt';\n\nconst wordLen = 5;\nconst maxGuessCount = 8;\n\nfunction ModalContent(props) {\n  return (\n    <div className=\"modal-content content\">\n      <div className=\"box\">\n        <h3 className=\"title is-3\">About</h3>\n        <p>This app looks up your Wordle guesses to find matches in the NY Times <a href=\"https://static.nytimes.com/newsgraphics/2022/01/25/wordle-solver/assets/solutions.txt\">list of possible solutions</a>. There are 2,309!</p>\n        <p>Designed and built by <a href=\"https://fionatran.ca\">Fiona Tran</a> with React and Bulma.</p>\n      </div>\n    </div>\n  );\n}\n\nclass Guess extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKey = this.handleKey.bind(this);\n  }\n\n  handleChange(event) {\n    const i = this.props.guessNumber;\n    this.props.onChange(i, event.target.placeholder, event.target.value.toLowerCase());\n  }\n\n  handleKey(event) {\n    if (event.key === 'Enter') {\n      this.props.onSubmit();\n    } else if (this.props.guessNumber === this.props.guessCount\n      && event.key === 'Tab' \n      && !event.shiftKey \n      && event.target.placeholder === 'Status'){\n      this.props.onAddGuess();\n    }\n  }\n\n  render() {\n    const focus = this.props.guessNumber === 0;\n    const hasValError = this.props.hasValError;\n    const wordInputClassName = 'input ' + ((hasValError[0]) ? 'is-danger' : '');\n    const statusInputClassName = 'input ' + ((hasValError[1]) ? 'is-danger' : '');\n\n    return (\n      <div className=\"panel-block\">\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label is-normal\">\n            <label className=\"label\">{this.props.guessNumber+1}</label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <div className=\"control\">\n                <input className={wordInputClassName} type=\"text\" placeholder=\"Word\" autoFocus={focus} onChange={this.handleChange} onKeyDown={this.handleKey} />\n              </div>\n            </div>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input className={statusInputClassName} type=\"text\" placeholder=\"Status\" onChange={this.handleChange} onKeyDown={this.handleKey} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass WordleLookup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guessCount: 0,\n      words: [\"\"],\n      statuses: [\"\"],\n      result: [],\n      hasValError: [[false, false]],\n      searchEnabled: false,\n      isModal: false\n    };\n    this.checkValError = this.checkValError.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleAddGuess = this.handleAddGuess.bind(this);\n    this.handleDeleteGuess = this.handleDeleteGuess.bind(this);\n    this.search = this.search.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  checkValError () {\n    let guessCount = this.state.guessCount;\n    let words = this.state.words;\n    let statuses = this.state.statuses;\n    let hasValError = this.state.hasValError;\n    let searchEnabled;\n\n    searchEnabled = true;\n    for (var i = 0; i <= guessCount; i++) {\n      for (var j = 0; j < hasValError[0].length; j++) {\n        if (hasValError[i][j]) {\n          searchEnabled = false;\n        }\n      }\n      if (words[i].length !== wordLen || statuses[i].length !== wordLen) {\n        searchEnabled = false;\n      }\n    }\n\n    return searchEnabled;\n  }\n\n  handleChange(i, field, value) {\n    const wordRe = new RegExp('^[a-zA-Z]+$');\n    const statusRe = new RegExp('^[hom]+$');\n    //let guessCount = this.state.guessCount;\n    let words = this.state.words;\n    let statuses = this.state.statuses;\n    let hasValError = this.state.hasValError;\n    let searchEnabled;\n\n    if (field === 'Word') {\n      words[i] = value;\n      this.setState({words: words});\n    } else {\n      statuses[i] = value;\n      this.setState({statuses: statuses});\n    }\n\n    if (value.length > wordLen || \n      (field === 'Word' && !value.match(wordRe)) ||\n      (field === 'Status' && !value.match(statusRe))) {\n      searchEnabled = false;\n      if (field === 'Word') {\n        hasValError[i][0] = true;\n      } else {\n        hasValError[i][1] = true;\n      }\n    } else {\n      if (field === 'Word') {\n        hasValError[i][0] = false;\n      } else {\n        hasValError[i][1] = false;\n      }\n\n      searchEnabled = this.checkValError();\n    }\n    \n    this.setState({searchEnabled: searchEnabled});\n  }\n\n  async handleSubmit() {\n    let guessCount = this.state.guessCount\n    let words = this.state.words;\n    let statuses = this.state.statuses;\n    let hasValError = this.state.hasValError;\n    let searchEnabled = this.checkValError();\n\n    for (var i = 0; i <= guessCount; i++) {\n      if (words[i].length !== wordLen) {\n        hasValError[i][0] = true;\n        searchEnabled = false;\n      }\n      if (statuses[i].length !== wordLen) {\n        hasValError[i][1] = true;\n        searchEnabled = false;\n      }\n    }\n    this.setState({\n      hasValError: hasValError, \n      searchEnabled: searchEnabled\n    });\n\n    await this.search();\n  }\n\n  async handleAddGuess() {\n    let guessCount = this.state.guessCount;\n    let words = this.state.words;\n    let statuses = this.state.statuses;\n    let hasValError = this.state.hasValError;\n\n    if (guessCount < maxGuessCount - 1) {\n      guessCount++;\n      words[guessCount] = \"\";\n      statuses[guessCount] = \"\";\n      hasValError[guessCount] = [false, false];\n      this.setState({\n        guessCount: guessCount,\n        words: words,\n        statuses: statuses,\n        hasValError: hasValError\n      });\n    }\n    await this.search();\n  }\n\n  async handleDeleteGuess() {\n    var guessCount = this.state.guessCount;\n    const words = this.state.words.slice(0, guessCount);\n    const statuses = this.state.statuses.slice(0, guessCount);\n    const hasValError = this.state.hasValError.slice(0, guessCount);\n    guessCount--;\n\n    await this.setState({\n      words: words,\n      statuses: statuses,\n      guessCount: guessCount,\n      hasValError: hasValError\n    });\n\n    let searchEnabled = await this.checkValError();\n    await this.setState({searchEnabled: searchEnabled});\n    await this.search();\n  }\n\n  async search() {\n    if (this.state.searchEnabled) {\n      let words = this.state.words;\n      let statuses = this.state.statuses;\n      const result = await searchDictionary(words, statuses);\n      this.setState({result: result});\n    }\n  }\n\n  toggleModal() {\n    this.setState((prev, props) => {\n      const newState = !prev.isModal;\n      return {isModal: newState};\n    });\n  }\n\n  render() {\n    const result = this.state.result;\n    const modalClass = \"modal \" + (this.state.isModal ? \"is-active\" : \"\");\n\n    const hasValError = this.state.hasValError;\n    var valErrorMessage = '';\n    for (var i = 0; i < hasValError.length; i++) {\n      for (var j = 0; j < hasValError[0].length; j++) {\n        if (hasValError[i][j]) {\n          valErrorMessage = (\n            <article className=\"message is-danger\">\n              <div className=\"message-body\">This form has errors.</div>\n            </article>\n            );\n        }\n      }\n    }\n\n    const guessCount = this.state.guessCount;\n    var guessArray = [];\n    for (i = 0; i <= guessCount; i++) {\n      guessArray.push(<Guess \n        key={i} \n        guessNumber={i} \n        guessCount={guessCount}\n        hasValError={hasValError[i]}\n        onChange={this.handleChange} \n        onAddGuess={this.handleAddGuess} \n        onSubmit={this.handleSubmit} />);\n    }\n\n    var addButton = \"\";\n    if (guessCount < maxGuessCount - 1) {\n      addButton = (\n        <button className=\"button is-link is-light\" onClick={this.handleAddGuess}>\n          <span className=\"material-symbols-rounded\">add</span>Guess\n        </button>);\n    }\n\n    var deleteButton = \"\";\n    if (guessCount > 0) {\n      deleteButton = (\n        <button className=\"button is-danger is-light\" onClick={this.handleDeleteGuess}>\n          <span className=\"material-symbols-rounded\">remove</span>Guess\n        </button>);\n    }\n\n    let words;\n    if (result.length === 0) {\n      words = 'Matches will show up here';\n    } else {\n      words = result.map((w, i) => {\n        return (\n          <li key={w}><a href={\"https://en.wiktionary.org/wiki/\"+w}>{w}</a></li>\n        );\n      });\n    }\n\n    return (\n      <>\n      <nav className=\"navbar is-primary has-shadow\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"./\"><img src={logo} alt=\"Wordle Lookup logo\" /></a>\n        </div>\n        <div className=\"navbar-end\">\n          <div role=\"button\" className=\"navbar-item pointer\" onClick={this.toggleModal}>\n            <span className=\"material-symbols-rounded\">help</span>\n          </div>\n        </div>\n      </nav>\n      <div className=\"page-container\">\n        <div className=\"columns\">\n          <div className=\"column is-one-third\">\n            <nav className=\"panel\">\n              <p className=\"panel-heading\">Past Guesses</p>\n              <div className=\"panel-block\">\n                <p className=\"content\">Enter each guessed <strong>word</strong> and the <strong>status</strong> of each letter in the word (hit = h, miss = m, off = o).</p>\n              </div>\n              {valErrorMessage}\n              {guessArray}\n              <div className=\"panel-block buttons is-centered\">\n                {addButton}\n                {deleteButton}\n                <button className=\"button is-primary\" onClick={this.handleSubmit}>\n                  Search\n                </button>\n              </div>\n            </nav>\n          </div>\n          <div className=\"column\">\n            <div className=\"matches box\">\n              <h4 className=\"title is-5\">Matches ({result.length})</h4>\n              <ul className=\"matches-list\">{words}</ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div id=\"modal-help\" className={modalClass}>\n        <div className=\"modal-background\" onClick={this.toggleModal}></div>\n        <ModalContent />\n        <button className=\"modal-close is-large\" aria-label=\"close\" onClick={this.toggleModal}></button>\n      </div>\n      </>\n    );\n  }\n}\n\n// ========================================\n\ndocument.body.classList.add('is-fullheight');\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<WordleLookup />);\n\nasync function searchDictionary(words, statuses) {\n  var expArray = new Array(wordLen).fill(null);\n  var hits = new Array(wordLen).fill(\"\");\n  var misses = new Array(wordLen).fill(\"\");\n  var onLetters = [];\n  var offs = new Array(wordLen).fill(\"\");\n  var offUniversal = [];\n  var offLetters = [];\n  let letterIndex;\n  let letter;\n  var searchRe = '(?=';\n  var result = [];\n\n  if ((words.length === 1 || statuses.length === 1) && (words[0] === \"\" || statuses[0] === \"\")) {\n    return result;\n  }\n\n  for (let i = 0; i < words.length && i < statuses.length; i++) {\n    onLetters[i] = new Array(26).fill(0);\n    offLetters[i] = new Array(26).fill(0);\n    for (let j = 0; j < wordLen && words[i] !== \"\" && words[i] !== \"\"; j++) {\n      letterIndex = words[i].charCodeAt(j) - 97;\n      switch(statuses[i].charAt(j)) {\n        case 'h':\n          hits[j] = words[i].charAt(j);\n          onLetters[i][letterIndex]++;\n          break;\n        case 'o':\n          offs[j] = words[i].charAt(j);\n          offLetters[i][letterIndex]++;\n          break;\n        case 'm':\n          misses[j] += words[i].charAt(j);\n          onLetters[i][letterIndex]++;\n          break;\n        default:\n      }\n    }\n  }\n\n  var onLettersCount = new Array(26).fill(0);\n  var offLettersCount = new Array(26).fill(0);\n  for (let i = 0; i < onLetters.length; i++) {\n    for (let j = 0; j < onLetters[0].length; j++) {\n      if (onLetters[i][j] > onLettersCount[j]) {\n        onLettersCount[j] = onLetters[i][j];\n      }\n      if (offLetters[i][j] > offLettersCount[j]) {\n        offLettersCount[j] = offLetters[i][j];\n      }\n    }\n  }\n\n  for (let i = 0; i < 26; i++) {\n    letter = String.fromCharCode(i + 97);\n    if (offLettersCount[i] > 0) {\n      if (onLettersCount[i] === 0) {\n        offUniversal += letter;\n      } else {\n        for (let j = 0; j < wordLen; j++) {\n          if (hits[j] === letter) {\n            offUniversal += letter;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < wordLen; i++) {\n    if (hits[i] !== \"\") {\n      expArray[i] = hits[i];\n    } else {\n      expArray[i] = '[^' + misses[i] + offs[i] + offUniversal + ']';\n    }\n    searchRe += expArray[i];\n  }\n\n  searchRe += ')';\n\n  for (let i = 0; i < 26; i++) {\n    if (onLettersCount[i] > 0) {\n      letter = String.fromCharCode(i + 97);\n      searchRe += '(?=([^' + letter + ']*' + letter + '[^' +  letter + ']*){' + onLettersCount[i] + '})';\n    }\n  }\n\n  let re = new RegExp(searchRe);\n\n  await fetch(dictionary)\n    .then(r => r.text())\n    .then(text => {\n      const lines = text.split(\"\\n\");\n      for (const entry of lines) {\n        if (entry.match(re) != null) {\n          result.push(entry);\n        }\n      }\n    });\n  return result;\n}"],"sourceRoot":""}